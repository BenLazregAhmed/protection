{
  "version": 3,
  "sources": ["../../@restart/hooks/esm/useMounted.js"],
  "sourcesContent": ["import { useRef, useEffect } from 'react';\r\n\r\n/**\r\n * Track whether a component is current mounted. Generally less preferable than\r\n * properlly canceling effects so they don't run after a component is unmounted,\r\n * but helpful in cases where that isn't feasible, such as a `Promise` resolution.\r\n *\r\n * @returns a function that returns the current isMounted state of the component\r\n *\r\n * ```ts\r\n * const [data, setData] = useState(null)\r\n * const isMounted = useMounted()\r\n *\r\n * useEffect(() => {\r\n *   fetchdata().then((newData) => {\r\n *      if (isMounted()) {\r\n *        setData(newData);\r\n *      }\r\n *   })\r\n * })\r\n * ```\r\n */\r\nexport default function useMounted() {\r\n  const mounted = useRef(true);\r\n  const isMounted = useRef(() => mounted.current);\r\n  useEffect(() => {\r\n    mounted.current = true;\r\n    return () => {\r\n      mounted.current = false;\r\n    };\r\n  }, []);\r\n  return isMounted.current;\r\n}"],
  "mappings": ";;;;;;AAAA,mBAAkC;AAsBnB,SAAR,aAA8B;AACnC,QAAM,cAAU,qBAAO,IAAI;AAC3B,QAAM,gBAAY,qBAAO,MAAM,QAAQ,OAAO;AAC9C,8BAAU,MAAM;AACd,YAAQ,UAAU;AAClB,WAAO,MAAM;AACX,cAAQ,UAAU;AAAA,IACpB;AAAA,EACF,GAAG,CAAC,CAAC;AACL,SAAO,UAAU;AACnB;",
  "names": []
}
